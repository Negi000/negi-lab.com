name: QR Code Generator (Static Implementation)

on:
  push:
    paths:
      - 'data/qr-data.txt'
      - 'data/qr-batch.json'
  workflow_dispatch:
    inputs:
      batch_data:
        description: 'JSON formatted batch data'
        required: false
        type: string

jobs:
  generate-qr-codes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Create output directory
        run: mkdir -p output
        
      - name: Process batch JSON (if exists)
        if: hashFiles('data/qr-batch.json') != ''
        run: |
          node -e "
          const fs = require('fs');
          const https = require('https');
          const path = require('path');
          
          async function generateQR(text, filename) {
            const size = 256;
            const url = \`https://chart.googleapis.com/chart?chs=\${size}x\${size}&cht=qr&chl=\${encodeURIComponent(text)}&choe=UTF-8\`;
            
            return new Promise((resolve, reject) => {
              const outputPath = path.join('output', filename);
              const file = fs.createWriteStream(outputPath);
              
              https.get(url, (response) => {
                if (response.statusCode === 200) {
                  response.pipe(file);
                  file.on('finish', () => {
                    file.close();
                    console.log(\`‚úì Generated: \${filename}\`);
                    resolve();
                  });
                } else {
                  reject(new Error(\`HTTP \${response.statusCode}\`));
                }
              }).on('error', reject);
            });
          }
          
          async function processBatch() {
            try {
              const batchData = JSON.parse(fs.readFileSync('data/qr-batch.json', 'utf8'));
              const tasks = [];
              
              if (batchData.files && Array.isArray(batchData.files)) {
                batchData.files.forEach((item, i) => {
                  const text = item.data || item.name || '';
                  const filename = item.filename || \`qr-\${String(i+1).padStart(3, '0')}.png\`;
                  if (text.trim()) {
                    tasks.push(generateQR(text, filename));
                  }
                });
              }
              
              await Promise.all(tasks);
              console.log(\`Successfully generated \${tasks.length} QR codes from batch file\`);
              
              // Create summary
              const summary = {
                generated: new Date().toISOString(),
                source: 'qr-batch.json',
                count: tasks.length,
                files: batchData.files.map((item, i) => ({
                  filename: item.filename || \`qr-\${String(i+1).padStart(3, '0')}.png\`,
                  data: item.data || item.name || ''
                }))
              };
              fs.writeFileSync('output/generation-summary.json', JSON.stringify(summary, null, 2));
              
            } catch (error) {
              console.error('Error processing batch file:', error);
              process.exit(1);
            }
          }
          
          processBatch();
          "
          
      - name: Process text file (if exists and no batch file)
        if: hashFiles('data/qr-data.txt') != '' && hashFiles('data/qr-batch.json') == ''
        run: |
          node -e "
          const fs = require('fs');
          const https = require('https');
          const path = require('path');
          
          async function generateQR(text, index) {
            const size = 256;
            const url = \`https://chart.googleapis.com/chart?chs=\${size}x\${size}&cht=qr&chl=\${encodeURIComponent(text)}&choe=UTF-8\`;
            const filename = \`qr-\${String(index).padStart(3, '0')}.png\`;
            
            return new Promise((resolve, reject) => {
              const outputPath = path.join('output', filename);
              const file = fs.createWriteStream(outputPath);
              
              https.get(url, (response) => {
                if (response.statusCode === 200) {
                  response.pipe(file);
                  file.on('finish', () => {
                    file.close();
                    console.log(\`‚úì Generated: \${filename}\`);
                    resolve(filename);
                  });
                } else {
                  reject(new Error(\`HTTP \${response.statusCode}\`));
                }
              }).on('error', reject);
            });
          }
          
          async function processTextFile() {
            try {
              const content = fs.readFileSync('data/qr-data.txt', 'utf8');
              const lines = content.split('\\n').map(line => line.trim()).filter(line => line);
              
              const tasks = lines.map((line, index) => generateQR(line, index + 1));
              const results = await Promise.all(tasks);
              
              console.log(\`Successfully generated \${results.length} QR codes from text file\`);
              
              // Create summary
              const summary = {
                generated: new Date().toISOString(),
                source: 'qr-data.txt',
                count: results.length,
                files: lines.map((line, index) => ({
                  filename: \`qr-\${String(index + 1).padStart(3, '0')}.png\`,
                  data: line
                }))
              };
              fs.writeFileSync('output/generation-summary.json', JSON.stringify(summary, null, 2));
              
            } catch (error) {
              console.error('Error processing text file:', error);
              process.exit(1);
            }
          }
          
          processTextFile();
          "
          
      - name: Process workflow input (if provided)
        if: github.event.inputs.batch_data != ''
        run: |
          echo '${{ github.event.inputs.batch_data }}' > temp-batch.json
          node -e "
          const fs = require('fs');
          const https = require('https');
          const path = require('path');
          
          // Same generateQR function as above
          async function generateQR(text, filename) {
            const size = 256;
            const url = \`https://chart.googleapis.com/chart?chs=\${size}x\${size}&cht=qr&chl=\${encodeURIComponent(text)}&choe=UTF-8\`;
            
            return new Promise((resolve, reject) => {
              const outputPath = path.join('output', filename);
              const file = fs.createWriteStream(outputPath);
              
              https.get(url, (response) => {
                if (response.statusCode === 200) {
                  response.pipe(file);
                  file.on('finish', () => {
                    file.close();
                    console.log(\`‚úì Generated: \${filename}\`);
                    resolve();
                  });
                } else {
                  reject(new Error(\`HTTP \${response.statusCode}\`));
                }
              }).on('error', reject);
            });
          }
          
          async function processInput() {
            try {
              const inputData = JSON.parse(fs.readFileSync('temp-batch.json', 'utf8'));
              const tasks = [];
              
              if (Array.isArray(inputData)) {
                inputData.forEach((text, i) => {
                  if (text && text.trim()) {
                    tasks.push(generateQR(text.trim(), \`input-qr-\${i+1}.png\`));
                  }
                });
              } else if (inputData.files) {
                inputData.files.forEach((item, i) => {
                  const text = item.data || item.name || '';
                  const filename = item.filename || \`input-qr-\${i+1}.png\`;
                  if (text.trim()) {
                    tasks.push(generateQR(text, filename));
                  }
                });
              }
              
              await Promise.all(tasks);
              console.log(\`Successfully generated \${tasks.length} QR codes from workflow input\`);
              
            } catch (error) {
              console.error('Error processing workflow input:', error);
              process.exit(1);
            }
          }
          
          processInput();
          "
          rm temp-batch.json
          
      - name: Commit and push generated files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action QR Generator"
          
          if [ -n "$(git status --porcelain output/)" ]; then
            git add output/
            git commit -m "üîó Auto-generated QR codes - $(date '+%Y-%m-%d %H:%M:%S') [skip ci]"
            git push
            echo "‚úÖ Generated QR codes committed and pushed"
          else
            echo "‚ÑπÔ∏è  No new QR codes to commit"
          fi
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qr-codes-${{ github.run_number }}
          path: output/
          retention-days: 30
          
      - name: Create release (if tagged)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: QR Codes ${{ github.ref }}
          body: |
            Automatically generated QR codes
            
            Generated: ${{ steps.date.outputs.date }}
            Total files: See artifacts
          draft: false
          prerelease: false
